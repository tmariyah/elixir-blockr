# Enum Fuctions

```elixir
import IEx.Helpers
require Integer
```

## Functions

```elixir
h Enum
```

```elixir
exports Enum
```

```elixir
:functions
|> Enum.__info__()
|> Enum.map(fn {name, arity} -> 
  "#{name}/#{arity}" 
  end)
|> Enum.each(&IO.puts/1)
```

```elixir
h Enum.any?
```

```elixir
1..20 |> Enum.any?(&Integer.is_even/1) # true
1..20 |> Enum.all?(&Integer.is_even/1)
```

```elixir
[] |> Enum.empty?() # true
%{one: 1, two: 2} |> Enum.empty?() # false
```

```elixir
901..1000 |> Enum.filter(&(&1 > 990))
```

```elixir
901..1000 |> Enum.find(&(&1 > 990))
```

```elixir
1..1000 |> Enum.reject(&(&1 > 9))
```

```elixir
[1, 1, 1, 1, 2, 2, 3, 1, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6] |> Enum.uniq()
```

```elixir
1..1000 |> Enum.shuffle() |> Enum.drop_while(fn x -> x > 990 end)
```

```elixir
Enum.zip(1..10, Enum.shuffle(21..30))
```

```elixir
Enum.with_index(Enum.shuffle(21..30))
```

```elixir
Enum.with_index(Enum.shuffle(21..30), 1)
```

```elixir
Enum.with_index(Enum.shuffle(21..30), 1) |> Enum.at(0)
```

```elixir
Enum.with_index(Enum.shuffle(21..30), 1) |> hd()
```

```elixir
h Enum.flat_map()
```
